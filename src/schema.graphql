# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface AnimalDTO {
  id: ID!
  name: String!
  species: String!
  living: Boolean!
  type: Boolean!
}

type TodoItem {
  id: ID!
  title: String!
  completed: Boolean!
  created: DateTime!
  updated: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Author {
  id: ID!
  name: String!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type TodoItemDeleteResponse {
  id: ID
  title: String
  completed: Boolean
  created: DateTime
  updated: DateTime
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type TodoItemEdge {
  """The node containing the TodoItem"""
  node: TodoItem!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type TodoItemConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [TodoItemEdge!]!
}

type Cat implements AnimalDTO {
  id: ID!
  name: String!
  species: String!
  living: Boolean!
  type: Boolean!
  numberOfLifes: Float!
}

type Dog implements AnimalDTO {
  id: ID!
  name: String!
  species: String!
  living: Boolean!
  type: Boolean!
}

type AnimalDeleteResponse {
  id: ID
  name: String
  species: String
  living: Boolean
  type: Boolean
}

type AnimalEdge {
  """The node containing the Animal"""
  node: AnimalDTO!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type AnimalConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [AnimalEdge!]!
}

type CatEdge {
  """The node containing the Cat"""
  node: Cat!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type CatConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [CatEdge!]!
}

type DogEdge {
  """The node containing the Dog"""
  node: Dog!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type DogConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [DogEdge!]!
}

type Query {
  author(id: Int!): Author!
  todoItem(
    """The id of the record to find."""
    id: ID!
  ): TodoItem!
  todoItems(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: TodoItemFilter! = {}

    """Specify to sort results."""
    sorting: [TodoItemSort!]! = []
  ): TodoItemConnection!
  animal(
    """The id of the record to find."""
    id: ID!
  ): AnimalDTO!
  animals(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: AnimalFilter! = {}

    """Specify to sort results."""
    sorting: [AnimalSort!]! = []
  ): AnimalConnection!
  cat(
    """The id of the record to find."""
    id: ID!
  ): Cat!
  cats(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: CatFilter! = {}

    """Specify to sort results."""
    sorting: [CatSort!]! = []
  ): CatConnection!
  dog(
    """The id of the record to find."""
    id: ID!
  ): Dog!
  dogs(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: DogFilter! = {}

    """Specify to sort results."""
    sorting: [DogSort!]! = []
  ): DogConnection!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input TodoItemFilter {
  and: [TodoItemFilter!]
  or: [TodoItemFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input TodoItemSort {
  field: TodoItemSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TodoItemSortFields {
  id
  title
  completed
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input AnimalFilter {
  and: [AnimalFilter!]
  or: [AnimalFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  species: StringFieldComparison
  living: BooleanFieldComparison
  type: BooleanFieldComparison
}

input AnimalSort {
  field: AnimalSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AnimalSortFields {
  id
  name
  species
  living
  type
}

input CatFilter {
  and: [CatFilter!]
  or: [CatFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  species: StringFieldComparison
  living: BooleanFieldComparison
  type: BooleanFieldComparison
  numberOfLifes: NumberFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input CatSort {
  field: CatSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CatSortFields {
  id
  name
  species
  living
  type
  numberOfLifes
}

input DogFilter {
  and: [DogFilter!]
  or: [DogFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  species: StringFieldComparison
  living: BooleanFieldComparison
  type: BooleanFieldComparison
}

input DogSort {
  field: DogSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DogSortFields {
  id
  name
  species
  living
  type
}

type Mutation {
  createOneTodoItem(input: CreateOneTodoItemInput!): TodoItem!
  createManyTodoItems(input: CreateManyTodoItemsInput!): [TodoItem!]!
  updateOneTodoItem(input: UpdateOneTodoItemInput!): TodoItem!
  updateManyTodoItems(input: UpdateManyTodoItemsInput!): UpdateManyResponse!
  deleteOneTodoItem(input: DeleteOneTodoItemInput!): TodoItemDeleteResponse!
  deleteManyTodoItems(input: DeleteManyTodoItemsInput!): DeleteManyResponse!
  deleteOneAnimal(input: DeleteOneAnimalInput!): AnimalDeleteResponse!
  deleteManyAnimals(input: DeleteManyAnimalsInput!): DeleteManyResponse!
  createOneCat(input: CreateOneCatInput!): Cat!
  createManyCats(input: CreateManyCatsInput!): [Cat!]!
  updateOneCat(input: UpdateOneCatInput!): Cat!
  updateManyCats(input: UpdateManyCatsInput!): UpdateManyResponse!
  createOneDog(input: CreateOneDogInput!): Dog!
  createManyDogs(input: CreateManyDogsInput!): [Dog!]!
  updateOneDog(input: UpdateOneDogInput!): Dog!
  updateManyDogs(input: UpdateManyDogsInput!): UpdateManyResponse!
}

input CreateOneTodoItemInput {
  """The record to create"""
  todoItem: CreateTodoItem!
}

input CreateTodoItem {
  title: String!
  completed: Boolean!
}

input CreateManyTodoItemsInput {
  """Array of records to create"""
  todoItems: [CreateTodoItem!]!
}

input UpdateOneTodoItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTodoItem!
}

input UpdateTodoItem {
  id: ID
  title: String
  completed: Boolean
  created: DateTime
  updated: DateTime
}

input UpdateManyTodoItemsInput {
  """Filter used to find fields to update"""
  filter: TodoItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTodoItem!
}

input TodoItemUpdateFilter {
  and: [TodoItemUpdateFilter!]
  or: [TodoItemUpdateFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
}

input DeleteOneTodoItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTodoItemsInput {
  """Filter to find records to delete"""
  filter: TodoItemDeleteFilter!
}

input TodoItemDeleteFilter {
  and: [TodoItemDeleteFilter!]
  or: [TodoItemDeleteFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
}

input DeleteOneAnimalInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyAnimalsInput {
  """Filter to find records to delete"""
  filter: AnimalDeleteFilter!
}

input AnimalDeleteFilter {
  and: [AnimalDeleteFilter!]
  or: [AnimalDeleteFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  species: StringFieldComparison
  living: BooleanFieldComparison
  type: BooleanFieldComparison
}

input CreateOneCatInput {
  """The record to create"""
  cat: CreateAnimalInput!
}

input CreateAnimalInput {
  name: String!
}

input CreateManyCatsInput {
  """Array of records to create"""
  cats: [CreateAnimalInput!]!
}

input UpdateOneCatInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCat!
}

input UpdateCat {
  id: ID
  name: String
  species: String
  living: Boolean
  type: Boolean
  numberOfLifes: Float
}

input UpdateManyCatsInput {
  """Filter used to find fields to update"""
  filter: CatUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCat!
}

input CatUpdateFilter {
  and: [CatUpdateFilter!]
  or: [CatUpdateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  species: StringFieldComparison
  living: BooleanFieldComparison
  type: BooleanFieldComparison
  numberOfLifes: NumberFieldComparison
}

input CreateOneDogInput {
  """The record to create"""
  dog: CreateAnimalInput!
}

input CreateManyDogsInput {
  """Array of records to create"""
  dogs: [CreateAnimalInput!]!
}

input UpdateOneDogInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDog!
}

input UpdateDog {
  id: ID
  name: String
  species: String
  living: Boolean
  type: Boolean
}

input UpdateManyDogsInput {
  """Filter used to find fields to update"""
  filter: DogUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDog!
}

input DogUpdateFilter {
  and: [DogUpdateFilter!]
  or: [DogUpdateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  species: StringFieldComparison
  living: BooleanFieldComparison
  type: BooleanFieldComparison
}